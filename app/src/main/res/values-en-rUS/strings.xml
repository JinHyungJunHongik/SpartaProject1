<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">SpartaTeamProject</string>
    <string name="tv_signup_text">Pick the photo you want.</string>
    <string name="et_nameHint">Name</string>
    <string name="et_idHint">ID</string>
    <string name="et_pwHint">Password</string>
    <string name="et_pwcheckHint">Confirm password</string>
    <string name="et_emailHint">Email</string>
    <string name="et_authent">Enter verification number</string>
    <string name="btn_join">Sign Up</string>
    <string name="btn_checkID">Check ID</string>
    <string name="available_id">This is an available ID.</string>
    <string name="nonavailable_id">The ID is already in use.</string>
    <string name="empty_in_et">Some information is missing.</string>
    <string name="pw_not_same">Password does not match.</string>
    <string name="id_not_available">Please check ID</string>
    <string name="email_not_correct">Incorrect email address.</string>
    <string name="authent_correct">Verification completed</string>
    <string name="authent_not_correct">Invalid verification number.</string>
    <string name="authent_check_required">Please check th verification number.</string>
    <string name="id_not_strong">Please enter an ID with at least 5 characters.</string>
    <string name="pw_not_strong">The password is not strong.</string>
    <string name="pw_not_strong_length">Please enter a password with at least 8 characters.</string>
    <string name="pw_not_strong_random">Passwords must contain all uppercase and lowercase letters and special characters</string>
    <string name="btn_newAuthent">Refresh</string>
    <string name="btn_checkAuthent">Check</string>
    <string name="icon_sample">Icon Sample</string>
    <string name="tts">TTS</string>
    <string name="tv_mp_id">Account:</string>
    <string name="tv_mp_name">Name:</string>
    <string name="tv_mp_email">Email:</string>
    <string name="tv_editProfile">Edit profile</string>
    <string name="tv_postCount">Post count</string>
    <string name="tv_save">Save</string>
    <string name="lang_not_supported">Language not supported.</string>
    <string name="init_failed">Initialization failed</string>
    <string name="num1">1</string>
    <string name="num2">2</string>
    <string name="num3">3</string>
    <string name="num4">4</string>
    <string name="num5">5</string>
    <string name="et_no_id">Please check your ID.</string>
    <string name="et_no_pw">Please check your password.</string>
    <string name="et_check_idpw">Please check your ID/password.</string>
    <string name="login_ok">Login successful</string>
    <string name="mbti1">ISFP</string>
    <string name="personality1">항상 침착한 편</string>
    <string name="tmi1">고양이 좋아해요</string>
    <string name="mbti2">ISFP</string>
    <string name="personality2">내향적</string>
    <string name="tmi2">술자리는 빠지지 않는 편</string>
    <string name="mbti3">ISTJ</string>
    <string name="personality3">조용함, 차분함</string>
    <string name="tmi3">신나고 정신사나운 노래 좋아함</string>
    <string name="mbti4">ENFP</string>
    <string name="personality4">솔직한 편</string>
    <string name="tmi4">만약에~ 로 시작하는 상상 좋아함</string>
    <string name="link1">https://nochfm0513.tistory.com/</string>
    <string name="link2">https://nsisn.tistory.com/</string>
    <string name="link3">https://sugapowderjj.tistory.com/</string>
    <string name="link4">https://bbosajang.tistory.com/</string>
    <string name="TIL1">"         오늘은 Git과 Github의 차이점을 알아보았다          Git          VCS(Version Control System)의 일종으로 프로그램의 버전 관리를 위한 툴.          시간(시간에 따른 버전 변화. v1 → v2)과 차원(비슷하지만 조금씩 다른 형상. 원본과 copy 또는 update본의 두 축으로 관리를 해준다.          Github          Git으로 관리하는 프로젝트들을 온라인 공간에 공유해서 프로젝트 구성원들이 함께 소프트웨어를 만들어갈 수 있도록 돕는 코드 공유 및 협업 서비스          온라인 git 저장소는 모든 업로드와 다운로드를 커밋 단위로 주고 받는다.          팀원 A가 커밋을 해서 버전을 만들어 업로드하면 깃헙 상의 프로젝트는 해당 버전으로 최신화되고, 팀원 B가 완료한 작업을 커밋해서 올리기 위해서는 반드시 깃헙 상의 최신 커밋을 먼저 다운받아서 자기 컴퓨터에 있는 프로젝트에 적용부터 하도록 강제가 된다. 커밋 상의 충돌사항이 있다면 그것도 팀원 B의 컴퓨터에서 병합 등으로 해결 하여야 비로소 자신이 작업한 커밋을 공유 공간에 올릴 수 있다. 즉, 작업은 개개인이 원하는 공간에서 원하는 시간에 하되 공유공간에 올릴 때에는 깃헙이 중간에서 교통 정리를 하여 서로의 작업 간 loss가 발생하지 않도록 해준다.         전세계의 많은 오픈소스 프로젝트들이 깃헙에서 공유되고 있다는 점!     "</string>
    <string name="TIL2">"         오늘은 MVVM 패턴 동작 과정을 알아보았다.          MVVM 동작 과정\\n         사용자의 Action들은 View를 통해 들어옵니다.          View에 Action이 들어오면 ViewModel에 Action을 전달합니다.          ViewModel은 Model에게 데이터를 요청합니다.          Model은 ViewModel에게 요청받은 데이터를 응답합니다.          ViewModel은 응답 받은 데이터를 가공하여 저장합니다.          View는 Data Binding을 이용해 UI를 갱신시킵니다.      "</string>
    <string name="TIL3">"               Activity Lifecycle          직역하면 액티비티의 생명주기, 즉 액티비티가 생성되고 실행되고 소멸되는 일련의 과정을 말한다.          특정 상황에서 자동으로 호출되는 콜백 메서드(Callback Method)를 제공한다.         ** Callback Method 란? 시스템에 의해 호출되는 메서드, 함수도 지정할 수 있다. 주로 비동기 프로그래밍에 사용된다. **           Activity Lifecycle 의 주요 Callback Method           1) onCreate(Bundle): 액티비티가 생성될 때 호출된다.            2) onStart(): 액티비티가 시작되고 사용자에게 보여지기 직전에 호출된다.           3) onResume(): 액티비티가 사용자의 상호작용을 받을 준비가 되었을 때 호출된다.           4) onPause(): 액티비티가 부분적으로, 또는 완전히 가려질 때 호출된다.           5) onStop(): 액티비티가 더 이상 사용자에게 보이지 않을 때 호출된다.           6) onDestory(): 액티비티가 소멸되기 직전에 호출된다.           7) onRestart(): 액티비티가 중지된 후 다시 시작할 때 호출된다.           Activity Lifecycle 를 잘 이용하면 메모리 누수를 방지할 수 있고 그로인해 앱의 성능과 안정성을 높일 수 있다.       오늘은 MVVM 패턴 동작 과정을 알아보았다."</string>
    <string name="TIL4">"          git branch는 복사본을 만드는 작업으로 원본파일은 그대로 두고 수정이 필요할 때 사용한다          [git branch 명령어]             1. git branch 브랜치이름           - 입력한 브랜치이름으로 생성하는 명령어             2. git brach           - 브랜치가 잘 생성되었는지 확인하는 명령어             3. git switch 브랜치이름 or git checkout 브랜치이름           - 입력한 브랜치이름의 브랜치로 이동하는 명령어           - git chechkout 명령어를 주로 썼으나 git switch 명령어로 바뀌는 추세             4. git switch -c 브랜치이름 or git checkout -b 브랜치이름           - 브랜치 생성과 동시에 생성한 브랜치로 이동하는 명령어             5. git merge 브랜치이름           - 현재 브랜치를 입력한 브랜치와 합치는 명령어           - 이 명령어는 충돌의 위험이 있어서 잘 안 씀                 [협업 시 코드 합치는 방법]             1. 브랜치 생성후 코드를 작성한다           2. git add .와 git commit -m  으로 코드를 저장한다           3. git push origin 브랜치명 입력해서 업로드           4. github에서 merge하기           5. 충돌없이 merge 되었다면 로컬에서 git checkout 브랜치명 명령어로 main브랜치로 이동           6. git pull origin 브랜치명             여러 브랜치를 사용할 때 develop브랜치를 만들어서 아래와 같이 사용한다           - Main 브랜치: 배포용           - develop 브랜치: 테스트 용           - 기능 브랜치: 기능 개발용       "</string>
</resources>